// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var VideoGameList$ReactTemplate = require("./VideoGameList.bs.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("App");

var ppx_printed_query = "query VideoGames  {\nvideoGames  {\nid  \ntitle  \ndeveloper  \ncompleted  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["videoGames"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Js_primitive.valFromOption(match);
                  var match$1 = value$1["id"];
                  var tmp;
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeString(match$1);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$1));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type VideoGame is missing");
                  }
                  var match$3 = value$1["title"];
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var match$4 = Js_json.decodeString(match$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field title on type VideoGame is missing");
                  }
                  var match$5 = value$1["developer"];
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeString(match$5);
                    tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$5));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field developer on type VideoGame is missing");
                  }
                  var match$7 = value$1["completed"];
                  var tmp$3;
                  if (match$7 !== undefined) {
                    var match$8 = Js_json.decodeBoolean(match$7);
                    tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(match$7));
                  } else {
                    tmp$3 = Js_exn.raiseError("graphql_ppx: Field completed on type VideoGame is missing");
                  }
                  return {
                          id: tmp,
                          title: tmp$1,
                          developer: tmp$2,
                          completed: tmp$3
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field videoGames on type Query is missing");
    }
    return {
            videoGames: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var VideoGames = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var VideoGamesQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var videoGamesQuery = make(/* () */0);
              return React.createElement("div", undefined, React.createElement("h1", undefined, "ReasonML + ReasonReact + GraphQL"), ReasonReact.element(undefined, undefined, Curry.app(VideoGamesQuery[/* make */3], [
                                  Js_primitive.some(videoGamesQuery.variables),
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  (function (param) {
                                      var result = param[/* result */0];
                                      if (typeof result === "number") {
                                        return React.createElement("div", undefined, "Loading video games!");
                                      } else if (result.tag) {
                                        return ReasonReact.element(undefined, undefined, VideoGameList$ReactTemplate.make(result[0].videoGames, /* array */[]));
                                      } else {
                                        return React.createElement("div", undefined, result[0].message);
                                      }
                                    })
                                ])));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.str = str;
exports.component = component;
exports.VideoGames = VideoGames;
exports.VideoGamesQuery = VideoGamesQuery;
exports.make = make$1;
/* component Not a pure module */
